@(#)$Id$

Overview of commands / communication between client and server.

Basic (socket-level) Communications
-----------------------------------

    LF    = line-feed (\n)
    FF    = line-feed (\f)
    TAB   = tab (\t)

* Client sends single-line commands to server, terminated by LF.

* Server sends two kinds of reply "log_msg" and "command_output":

  reply          := log_msg | command_output
  log_msg        := log_hdr + text + LF
  log_hdr        := FF + "LOG" + TAB
  command_output := ( text + LF )* + ready_prompt
  ready_prompt   : = FF + "READY" + LF

  1. Log messages:

     Should be read by the client and buffered internally. Show log
     and clear log display and clear this internal buffer.

  2. Command output:

     All text up to (but not including) the ready_prompt.

  Log messages are sent by the server whenever it has something to log.
  Hence, a client may receive zero or more log messages when it waits
  for command output.

Server commands
---------------

quit
ping
get_status
get_arp     [X]
clear_arp   X
get_ip      [X]
clear_ip    X
set_dead    X
set_alive   X [Y]
set_pending X Y
set_queue   X Y
set_rate    X Y

Command mappings
----------------

Client              Server
-----------------------------------
quit                quit
ping                ping
sponge X            set_dead   X
unsponge X          set_alive  X
clear ip X          clear_ip   X
clear arp X         clear_arp  X
clear log           -
set ip X pending Y  set_pending X Y
set ip X alive [Y]  set_alive   X Y
set ip X dead       set_dead    X
set ip X mac Y      set_alive   X Y
set ip X queue Y    set_queue   X Y
set ip X rate Y     set_rate    X Y

show status         status
show arp [X]        get_arp [X]
show version        get_status
show uptime         get_status
show log            -
show ip             get_ip
show ip X           get_ip X, get_arp X
show ip X state     get_ip X
show ip X mac       get_arp X
show ip X queue     get_ip X
show ip X rate      get_ip X

Data Types
----------

IP addresses are sent as hexadecimal strings.
MAC addresses are sent as hexadecimal strings.
Boolean values are sent as 0 or 1.
Time stamps are sent as seconds since epoch.

Server:

    Output is sent as <key>=<val> <LF> <key=val>, with
    <LF><LF> between records.

        -----------------------------

        ip=1c201a6f
        state=ALIVE
        queue=0
        rate=0.0
        state_mtime=1301071508
        state_atime=1301071567

        ip=1c201a70
        state=DEAD
        queue=500
        rate=60.0
        state_mtime=1301071402
        state_atime=1301071663

        [OK]

        -----------------------------

        id=arpsponge
        pid=3456
        version=3.10-alpha2(110)
        date=1301071803
        started=1300897051
        network=5bc81100
        prefixlen=26
        interface=eth0
        ip=5bc81128
        mac=fe000096000a
        max_queue=200
        max_rate=30.00
        flood_protection=5.00
        max_pending=10
        sweep_period=900
        sweep_age=3600
        proberate=100
        next_sweep=38
        learning=0
        dummy=1

        [OK]
